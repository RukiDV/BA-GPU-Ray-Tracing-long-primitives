#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"
#include "wavefront.glsl"


layout(binding = 9, set = 1, scalar, std140) buffer allHairs_
{
  Hair allHairs[];
};


struct Ray
{
  vec3 origin;
  vec3 direction;
};


float iHair(Ray r, in vec3 p0, in vec3 p1, float thickness)
{
// center the cylinder, normalize axis
    vec3 cc = 0.5*(p0 + p1);
    float ch = length(p1 - p0);
    vec3 ca = (p1 - p0)/ch;
    ch *= 0.5;

    vec3  oc = r.origin - cc;

    float card = dot(ca,r.direction);
    float caoc = dot(ca,oc);
    
    float a = 1.0 - card*card;
    float b = dot( oc, r.direction) - caoc*card;
    float c = dot( oc, oc) - caoc*caoc - (thickness/2)*(thickness/2);
    float h = b*b - a*c;
    if( h<0.0 ) return 10000.0;
    h = sqrt(h);
    float t1 = (-b-h)/a;
    //float t2 = (-b+h)/a; // exit point

    float y = caoc + t1*card;

    // body
    if( abs(y)<ch ) return t1;
    
    // caps
    float sy = sign(y);
    float tp = (sy*ch - caoc)/card;
    if( abs(b+a*tp)<h )
    {
        return  tp;
    }

    return 10000.0;
}

void main()
{
  Ray ray;
  ray.origin    = gl_WorldRayOriginEXT;
  ray.direction = gl_WorldRayDirectionEXT;

  float tHitB = 10000.0;

	Hair hair = allHairs[gl_PrimitiveID];
	tHitB = iHair(ray, hair.p0, hair.p1, hair.thickness);

  // Report hit point
  if(tHitB < 9999)
    reportIntersectionEXT(tHitB, KIND_HAIR);
}
